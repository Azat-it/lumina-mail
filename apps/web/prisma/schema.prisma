generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  campaigns     Campaign[]
  contacts      Contact[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Campaign {
  id          Int                 @id @default(autoincrement())
  subject     String
  content     String
  title       String
  previewText String              @map("preview_text")
  ctaText     String?             @map("cta_text")
  ctaUrl      String?             @map("cta_url")
  status      String              @default("draft")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  userId      String
  recipients  CampaignRecipient[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model Contact {
  id        String              @id @default(cuid())
  email     String
  name      String?
  metadata  String?
  status    String              @default("subscribed")
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  userId    String
  campaigns CampaignRecipient[]
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, userId])
  @@map("contact")
}

model CampaignRecipient {
  id         String    @id @default(cuid())
  campaignId Int
  contactId  String
  status     String    @default("pending")
  sentAt     DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?
  contact    Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@map("campaign_recipient")
}
