// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  campaigns     Campaign[]
  contacts      Contact[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String    // HTML content
  status      String    @default("draft") // draft, scheduled, sending, sent
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients  CampaignRecipient[]

  @@map("campaign")
}

model Contact {
  id        String    @id @default(cuid())
  email     String
  name      String?
  metadata  String?   // JSON string for additional fields
  status    String    @default("subscribed") // subscribed, unsubscribed, bounced
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns CampaignRecipient[]

  @@unique([email, userId])
  @@map("contact")
}

model CampaignRecipient {
  id         String    @id @default(cuid())
  campaignId String
  contactId  String
  status     String    @default("pending") // pending, sent, delivered, opened, clicked, bounced
  sentAt     DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact    Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@map("campaign_recipient")
}
